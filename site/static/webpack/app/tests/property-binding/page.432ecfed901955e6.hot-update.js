"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/tests/property-binding/page",{

/***/ "(app-pages-browser)/./src/chemistry.ts":
/*!**************************!*\
  !*** ./src/chemistry.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $Chemical: () => (/* binding */ $Chemical),\n/* harmony export */   child: () => (/* binding */ child),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   entail: () => (/* binding */ entail),\n/* harmony export */   equate: () => (/* binding */ equate),\n/* harmony export */   fifth: () => (/* binding */ fifth),\n/* harmony export */   first: () => (/* binding */ first),\n/* harmony export */   fourth: () => (/* binding */ fourth),\n/* harmony export */   inert: () => (/* binding */ inert),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   second: () => (/* binding */ second),\n/* harmony export */   third: () => (/* binding */ third),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   where: () => (/* binding */ where)\n/* harmony export */ });\n/* harmony import */ var _swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @swc/helpers/_/_ts_decorate */ \"(app-pages-browser)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_client_entry_do_not_use__ $Chemical,inert,equate,dynamic,entail,transform,child,optional,where,position,first,second,third,fourth,fifth auto */ \n\n// Symbol for tracking reactified objects\nconst reactivated = Symbol('reactivated');\nconst backingFields = Symbol('backingFields');\nconst originalValues = Symbol('originalValues');\nconst deactivated = Symbol('deactivated');\nconst comparerSymbol = Symbol('comparer');\n// Near the top of the file, with other symbols and constants\nconst componentUpdaters = new WeakMap();\n/**\n * Base class for Chemical components\n */ class $Chemical {\n    // Public methods\n    view() {\n        return this.elements;\n    }\n    // Private methods\n    createComponent() {\n        const self = this;\n        const ChemicalComponent = (props)=>{\n            const instance = self.createInstance();\n            const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n            (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n                \"ChemicalComponent.useEffect\": ()=>{\n                    self.setupInstance(instance, props, {\n                        \"ChemicalComponent.useEffect\": ()=>forceUpdate({})\n                    }[\"ChemicalComponent.useEffect\"]);\n                    return ({\n                        \"ChemicalComponent.useEffect\": ()=>self.cleanupInstance(instance)\n                    })[\"ChemicalComponent.useEffect\"];\n                }\n            }[\"ChemicalComponent.useEffect\"], []);\n            self.processChildren(instance, props);\n            return instance.view();\n        };\n        ChemicalComponent.isChemical = true;\n        return ChemicalComponent;\n    }\n    createInstance() {\n        const instance = Object.create(this);\n        instance.children = [];\n        return instance;\n    }\n    setupInstance(instance, props, forceUpdate) {\n        this.applyProps(instance, props);\n        this.setupReactivity(instance, forceUpdate);\n        this.handleParentBinding(instance, props);\n        this.runCatalystMethods(instance);\n    }\n    cleanupInstance(instance) {\n        componentUpdaters.delete(instance);\n        if (instance.parent) {\n            this.unregisterFromParent(instance, instance.parent);\n        }\n    }\n    applyProps(instance, props) {\n        if (!props) return;\n        for(const key in props){\n            if (props.hasOwnProperty(key) && key !== 'children' && key !== '__parentInstance') {\n                this.setProp(instance, key, props[key]);\n            }\n        }\n    }\n    setProp(instance, key, value) {\n        const componentKey = '$' + String(key);\n        const transformers = instance.constructor.prototype.transformers;\n        if (transformers === null || transformers === void 0 ? void 0 : transformers.has(componentKey)) {\n            const transformer = transformers.get(componentKey);\n            instance[componentKey] = transformer(value);\n        } else {\n            instance[componentKey] = value;\n        }\n    }\n    setupReactivity(instance, forceUpdate) {\n        componentUpdaters.set(instance, forceUpdate);\n        decorate(instance, {\n            after: (className, memberName, memberType, method, args, result)=>{\n                if (memberType === 'field') {\n                    const updateFn = componentUpdaters.get(instance);\n                    if (updateFn) updateFn();\n                }\n                return result;\n            }\n        });\n    }\n    handleParentBinding(instance, props) {\n        console.log('handleParentBinding called', props);\n        if (!props.__parentInstance) {\n            console.log('No parent instance in props');\n            return;\n        }\n        instance.parent = props.__parentInstance;\n        console.log('Registering child with parent: ' + props.__parentInstance);\n        if (instance.parent) this.registerWithParent(instance, instance.parent);\n    }\n    registerWithParent(child, parent) {\n        this.trackChild(parent, child);\n        this.applyBinding(child, parent);\n    }\n    trackChild(parent, child) {\n        if (!parent.children.includes(child)) {\n            parent.children.push(child);\n        }\n    }\n    untrackChild(parent, child) {\n        const index = parent.children.indexOf(child);\n        if (index >= 0) {\n            parent.children.splice(index, 1);\n        }\n    }\n    applyBinding(child, parent) {\n        const bindings = getBindings(parent);\n        console.log('applyBinding - bindings:', bindings);\n        console.log('applyBinding - child:', child);\n        console.log('applyBinding - parent:', parent);\n        if (!parent.childPositionCounts) {\n            parent.childPositionCounts = new Map();\n        }\n        for (const binding of bindings){\n            if (binding.property === 'children') continue;\n            console.log('Checking binding:', binding);\n            if (this.matchesBinding(child, parent, binding)) {\n                console.log('Binding matched! Applying...');\n                this.bindChild(child, parent, binding);\n                break;\n            }\n        }\n    }\n    matchesBinding(child, parent, binding) {\n        if (!(child instanceof binding.class)) return false;\n        if (binding.position !== undefined) {\n            const count = parent.childPositionCounts.get(binding.class) || 0;\n            if (binding.position !== count) {\n                parent.childPositionCounts.set(binding.class, count + 1);\n                return false;\n            }\n            parent.childPositionCounts.set(binding.class, count + 1);\n        }\n        if (binding.where && !binding.where(child)) return false;\n        return true;\n    }\n    bindChild(child, parent, binding) {\n        const prop = parent[binding.property];\n        if (Array.isArray(prop)) {\n            prop.push(child);\n        } else if (!parent[binding.property]) {\n            parent[binding.property] = child;\n        }\n    }\n    unbindChild(child, parent) {\n        const bindings = getBindings(parent);\n        for (const binding of bindings){\n            if (binding.property === 'children') continue;\n            const prop = parent[binding.property];\n            if (Array.isArray(prop)) {\n                const index = prop.indexOf(child);\n                if (index >= 0) prop.splice(index, 1);\n            } else if (parent[binding.property] === child) {\n                parent[binding.property] = undefined;\n            }\n        }\n    }\n    unregisterFromParent(child, parent) {\n        this.unbindChild(child, parent);\n        this.untrackChild(parent, child);\n    }\n    runCatalystMethods(instance) {\n        const methods = instance.constructor.prototype.catalystMethods;\n        if (!methods) return;\n        for (const methodName of methods){\n            if (typeof instance[methodName] === 'function') {\n                instance[methodName]();\n            }\n        }\n    }\n    processChildren(instance, props) {\n        if (!(props === null || props === void 0 ? void 0 : props.children)) return;\n        const modifiedChildren = this.modifyChildren(instance, props.children);\n        instance.elements = modifiedChildren;\n    }\n    modifyChildren(instance, children) {\n        console.log('modifyChildren called, instance:', instance);\n        const childrenArray = react__WEBPACK_IMPORTED_MODULE_0___default().Children.toArray(children);\n        console.log('childrenArray:', childrenArray);\n        return childrenArray.map((child)=>{\n            if (react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(child) && child.type.isChemical) {\n                console.log('Found Chemical child, adding __parentInstance');\n                return react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, {\n                    ...child.props,\n                    __parentInstance: instance\n                });\n            }\n            return child;\n        });\n    }\n    createFragment(above, main, below) {\n        const children = [];\n        if (above) children.push(above);\n        if (main) children.push(main);\n        if (below) children.push(below);\n        return react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, ...children);\n    }\n    // Constructor\n    constructor(){\n        this.children = [];\n        this.Component = this.createComponent();\n    }\n}\n(0,_swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_1__.__decorate)([\n    inert()\n], $Chemical.prototype, \"Component\", void 0);\n(0,_swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_1__.__decorate)([\n    inert()\n], $Chemical.prototype, \"parent\", void 0);\n(0,_swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_1__.__decorate)([\n    inert()\n], $Chemical.prototype, \"children\", void 0);\n(0,_swc_helpers_ts_decorate__WEBPACK_IMPORTED_MODULE_1__.__decorate)([\n    inert()\n], $Chemical.prototype, \"elements\", void 0);\n/**\n * Get merged bindings for a Chemical instance\n */ function getBindings(instance) {\n    const constructor = instance.constructor;\n    // Return cached if available\n    if (constructor._mergedBindings) {\n        return constructor._mergedBindings;\n    }\n    // Build merged map\n    const mergedMap = new Map();\n    // Walk up prototype chain, child bindings override parent\n    let proto = constructor;\n    while(proto && proto !== $Chemical){\n        if (proto.__bindingsMap) {\n            proto.__bindingsMap.forEach((binding, key)=>{\n                // Only add if not already set by child class\n                if (!mergedMap.has(key)) {\n                    mergedMap.set(key, {\n                        ...binding,\n                        property: key\n                    });\n                }\n            });\n        }\n        proto = Object.getPrototypeOf(proto);\n    }\n    // Convert to array, filter invalid, and sort\n    const bindings = [];\n    mergedMap.forEach((binding)=>{\n        if (!binding.class) {\n            console.warn(\"Binding for '\".concat(binding.property, \"' missing @child decorator\"));\n            return;\n        }\n        bindings.push(binding);\n    });\n    // Sort: indexed first, then by index value\n    bindings.sort((a, b)=>{\n        if (a.position !== undefined && b.position === undefined) return -1;\n        if (b.position !== undefined && a.position === undefined) return 1;\n        if (a.position !== undefined && b.position !== undefined) {\n            return a.position - b.position;\n        }\n        return 0;\n    });\n    // Cache and return\n    constructor._mergedBindings = bindings;\n    return bindings;\n}\n/**\n * Reactivates an object, making its properties reactive\n */ function reactivate(instance, owner) {\n    // Already marked as reactivated in component\n    if (instance[reactivated]) {\n        return instance;\n    }\n    instance[reactivated] = true;\n    const triggerUpdate = ()=>{\n        const updateFn = componentUpdaters.get(owner || instance);\n        if (updateFn) updateFn();\n    };\n    decorate(instance, {\n        after: (className, memberName, memberType, method, args, result)=>{\n            if (memberType === 'field') {\n                triggerUpdate();\n            }\n            return result;\n        }\n    });\n    // Only reactify non-Chemical objects\n    for(const key in instance){\n        if (key !== 'constructor' && !key.startsWith('_')) {\n            const value = instance[key];\n            // Skip Chemical instances - they manage themselves\n            if (!(value instanceof $Chemical) && value && typeof value === 'object' && !(value instanceof Date)) {\n                if (Array.isArray(value)) {\n                    value.forEach((item)=>{\n                        if (!(item instanceof $Chemical) && item && typeof item === 'object') {\n                            reactivateData(item, owner || instance);\n                        }\n                    });\n                } else {\n                    reactivateData(value, owner || instance);\n                }\n            }\n        }\n    }\n    return instance;\n}\n/**\n * Reactivates a nested data object in an object or field \n */ function reactivateData(obj, owner) {\n    if (!obj || typeof obj !== 'object' || obj[reactivated] || obj instanceof $Chemical) {\n        return;\n    }\n    reactivate(obj, owner);\n}\n/**\n * Deactivates an object, preventing it from triggering updates\n * This is exported for advanced usage but generally should be used via Chemical.deactivate\n */ function deactivate(instance) {\n    // Mark as deactivated\n    instance[deactivated] = true;\n    return instance;\n}\n/**\n * Decorator to mark a field as inert (non-reactive)\n */ function inert() {\n    return function(target, propertyKey) {\n        // Create or get the inert properties set\n        if (!target[deactivated]) {\n            target[deactivated] = new Set();\n        }\n        // Add this property to the inert set\n        target[deactivated].add(propertyKey);\n    };\n}\n/**\n * Decorator to specify a custom equality comparison for a field\n */ function equate(comparer) {\n    return function(target, propertyKey) {\n        // Create or get the property comparers map\n        if (!target[comparerSymbol]) {\n            target[comparerSymbol] = new Map();\n        }\n        // Add the custom comparer for this property\n        target[comparerSymbol].set(propertyKey, comparer);\n    };\n}\n/**\n * Decorator for properties that should use deep equality comparison\n * Useful for arrays, collections, and complex objects\n */ function dynamic() {\n    return function(target, propertyKey) {\n        // Create or get the property comparers map\n        if (!target[comparerSymbol]) {\n            target[comparerSymbol] = new Map();\n        }\n        // Add a JSON-based deep comparer for this property\n        target[comparerSymbol].set(propertyKey, (a, b)=>{\n            try {\n                return JSON.stringify(a) === JSON.stringify(b);\n            } catch (e) {\n                // If stringify fails (circular refs, etc.), fall back to reference equality\n                return a === b;\n            }\n        });\n    };\n}\n/**\n * Decorator for methods that should run after component rendering\n */ function entail() {\n    return function(target, propertyKey, descriptor) {\n        const originalMethod = descriptor.value;\n        // Create or get the catalysts methods set\n        if (!target.catalystMethods) {\n            target.catalystMethods = new Set();\n        }\n        // Add this method to the catalysts set\n        target.catalystMethods.add(propertyKey);\n        // Return the original descriptor\n        return descriptor;\n    };\n}\n/**\n * Decorator for properties that should run the value through a transformation function\n */ function transform(transformer) {\n    return function(target, propertyKey) {\n        // Create or get the transformers map\n        if (!target.transformers) {\n            target.transformers = new Map();\n        }\n        // Add the transformer for this property\n        target.transformers.set(propertyKey, transformer);\n    };\n}\n/**\n * Decorator for binding a child to a property\n */ function child(ChildClass) {\n    return function(target, propertyKey) {\n        const constructor = target.constructor;\n        if (!constructor.__bindingsMap) constructor.__bindingsMap = new Map();\n        let binding = constructor.__bindingsMap.get(propertyKey);\n        if (!binding) {\n            binding = {\n                property: propertyKey\n            };\n            constructor.__bindingsMap.set(propertyKey, binding);\n        }\n        binding.class = ChildClass;\n        if (binding.optional === undefined) binding.optional = false;\n    };\n}\n/**\n * Decorator for positional child property binding\n */ function optional() {\n    return function(target, propertyKey) {\n        const constructor = target.constructor;\n        if (!constructor.__bindingsMap) constructor.__bindingsMap = new Map();\n        let binding = constructor.__bindingsMap.get(propertyKey);\n        if (!binding) {\n            binding = {\n                property: propertyKey\n            };\n            constructor.__bindingsMap.set(propertyKey, binding);\n        }\n        binding.optional = true;\n    };\n}\n/**\n * Decorator for conditional child property binding\n */ function where(predicate) {\n    return function(target, propertyKey) {\n        const constructor = target.constructor;\n        if (!constructor.__bindingsMap) constructor.__bindingsMap = new Map();\n        let binding = constructor.__bindingsMap.get(propertyKey);\n        if (!binding) {\n            binding = {\n                property: propertyKey\n            };\n            constructor.__bindingsMap.set(propertyKey, binding);\n        }\n        binding.where = predicate;\n    };\n}\n/**\n * Decorator for positional child property binding\n */ function position(n) {\n    return function(target, propertyKey) {\n        const constructor = target.constructor;\n        if (!constructor.__bindingsMap) constructor.__bindingsMap = new Map();\n        let binding = constructor.__bindingsMap.get(propertyKey);\n        if (!binding) {\n            binding = {\n                property: propertyKey\n            };\n            constructor.__bindingsMap.set(propertyKey, binding);\n        }\n        binding.position = n - 1; // 0-based\n    };\n}\n// Convencience child binding decorators for different positions\nconst first = position(1);\nconst second = position(2);\nconst third = position(3);\nconst fourth = position(4);\nconst fifth = position(5);\n/**\n * Decorates an object's methods and properties with interceptors\n */ function decorate(instance, config) {\n    var _instance_constructor;\n    // Skip if already decorated\n    if (instance[reactivated]) {\n        return instance;\n    }\n    var _instance_constructor_name;\n    const className = (_instance_constructor_name = instance === null || instance === void 0 ? void 0 : (_instance_constructor = instance.constructor) === null || _instance_constructor === void 0 ? void 0 : _instance_constructor.name) !== null && _instance_constructor_name !== void 0 ? _instance_constructor_name : \"<UNKNOWN>\";\n    // Store original values\n    instance[backingFields] = {};\n    instance[originalValues] = {};\n    // Process properties and fields\n    decorateProperties(instance, className, config);\n    // Mark as reactified\n    instance[reactivated] = true;\n    return instance;\n}\n/**\n * Decorates properties of an object with interceptors\n */ function decorateProperties(instance, className, config) {\n    const properties = getAllProperties(instance);\n    for (const key of properties){\n        // Skip internal properties and methods we've already processed\n        if (key === 'constructor' || key === String(reactivated) || key === String(backingFields) || key === String(originalValues) || key === 'state' || key === 'props' || typeof instance[key] === 'function' || $Chemical.prototype.hasOwnProperty(key) || // Skip Chemical base class properties\n        instance[key] instanceof $Chemical) {\n            continue;\n        }\n        // Check if this is already an accessor property\n        const descriptor = Object.getOwnPropertyDescriptor(instance, key) || Object.getOwnPropertyDescriptor(Object.getPrototypeOf(instance), key);\n        if (descriptor && (descriptor.get || descriptor.set)) {\n            // Handle accessor property\n            decorateAccessorProperty(instance, key, descriptor, className, config);\n            continue;\n        }\n        // Handle regular data property\n        // Store original value\n        instance[backingFields][key] = instance[key];\n        // Replace with getter/setter for regular properties\n        Object.defineProperty(instance, key, {\n            get: function() {\n                const value = this[backingFields][key];\n                if (config.after) {\n                    const afterResult = config.after(className, key, 'property', ()=>{}, [], value);\n                    return afterResult !== null && afterResult !== void 0 ? afterResult : value;\n                }\n                return value;\n            },\n            set: function(newValue) {\n                const oldValue = this[backingFields][key];\n                // Skip update if values are equal\n                if (oldValue === newValue) {\n                    return;\n                }\n                // Check for custom comparer\n                const proto = Object.getPrototypeOf(this);\n                const hasCustomComparer = proto && proto[comparerSymbol] && proto[comparerSymbol].has(key);\n                if (hasCustomComparer) {\n                    const customComparer = proto[comparerSymbol].get(key);\n                    if (customComparer(oldValue, newValue)) {\n                        return; // Skip update if custom comparer says they're equal\n                    }\n                }\n                let valueToSet = newValue;\n                // Apply before logic if available\n                if (config.before) {\n                    const beforeResult = config.before(className, key, 'field', ()=>{}, [\n                        newValue\n                    ]);\n                    if (beforeResult && beforeResult[1]) {\n                        valueToSet = beforeResult[1][0];\n                    }\n                }\n                // Handle frozen/sealed objects\n                if (valueToSet && typeof valueToSet === 'object') {\n                    // Skip reactification for frozen/sealed objects and Chemical instances\n                    if (!Object.isFrozen(valueToSet) && !Object.isSealed(valueToSet) && Object.isExtensible(valueToSet) && !(valueToSet instanceof $Chemical)) {\n                        // Deep reactify complex objects\n                        if (!Array.isArray(valueToSet) && !(valueToSet instanceof Date)) {\n                            reactivateData(valueToSet, this);\n                        }\n                    }\n                }\n                // Set the new value\n                this[backingFields][key] = valueToSet;\n                // Apply after logic\n                if (config.after) {\n                    config.after(className, key, 'field', ()=>{}, [\n                        valueToSet\n                    ], undefined);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n    }\n}\n/**\n * Decorates an accessor property (getter/setter)\n */ function decorateAccessorProperty(instance, key, descriptor, className, config) {\n    const originalGet = descriptor.get;\n    const originalSet = descriptor.set;\n    Object.defineProperty(instance, key, {\n        get: function() {\n            // Preserve original getter behavior\n            const value = originalGet === null || originalGet === void 0 ? void 0 : originalGet.call(this);\n            if (config.after) {\n                const afterResult = config.after(className, key, 'property', ()=>{}, [], value);\n                return afterResult !== null && afterResult !== void 0 ? afterResult : value;\n            }\n            return value;\n        },\n        set: function(newValue) {\n            if (!originalSet) return; // Read-only property\n            const oldValue = originalGet === null || originalGet === void 0 ? void 0 : originalGet.call(this);\n            // Skip update if values are equal\n            if (oldValue === newValue) {\n                return;\n            }\n            // Check for custom comparer\n            const proto = Object.getPrototypeOf(this);\n            const hasCustomComparer = proto && proto[comparerSymbol] && proto[comparerSymbol].has(key);\n            if (hasCustomComparer) {\n                const customComparer = proto[comparerSymbol].get(key);\n                if (customComparer(oldValue, newValue)) {\n                    return; // Skip update if custom comparer says they're equal\n                }\n            }\n            // Call original setter\n            originalSet.call(this, newValue);\n            // Apply after logic to trigger updates\n            if (config.after) {\n                config.after(className, key, 'field', ()=>{}, [\n                    newValue\n                ], undefined);\n            }\n        },\n        enumerable: descriptor.enumerable,\n        configurable: descriptor.configurable\n    });\n}\n/**\n * Checks if an object is a base object method\n */ function isBaseObjectMethod(methodName) {\n    return Object.prototype.hasOwnProperty.call(Object.prototype, methodName);\n}\n/**\n * Gets all methods from an object and its prototype chain\n */ function getAllMethods(obj) {\n    const methods = {};\n    let proto = obj;\n    while(proto && proto !== Object.prototype){\n        for(const key in proto){\n            if (methods[key]) continue;\n            if (typeof proto[key] === \"function\" && !key.startsWith(\"_\") && // Skip private methods\n            !isBaseObjectMethod(key)) {\n                methods[key] = proto[key];\n            }\n        }\n        proto = proto.__proto__;\n    }\n    return methods;\n}\n/**\n * Gets all properties from an object\n */ function getAllProperties(obj) {\n    const properties = new Set();\n    // Get own properties\n    Object.getOwnPropertyNames(obj).forEach((prop)=>{\n        properties.add(prop);\n    });\n    // Get properties from prototype chain\n    let proto = Object.getPrototypeOf(obj);\n    while(proto && proto !== Object.prototype){\n        Object.getOwnPropertyNames(proto).forEach((prop)=>{\n            if (!prop.startsWith('_') && prop !== 'constructor') {\n                properties.add(prop);\n            }\n        });\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Array.from(properties);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/chemistry.ts\n"));

/***/ })

});